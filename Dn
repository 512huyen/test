import { Injectable } from '@nestjs/common';
import * as ExcelJS from 'exceljs';
import { Response } from 'express';

@Injectable()
export class ReportService {
  async exportDebtReport(res: Response): Promise<void> {
    const workbook = new ExcelJS.Workbook();
    const sheet = workbook.addWorksheet('Báo cáo quản lý dư nợ');

    // 1. Thiết lập tiêu đề
    sheet.mergeCells('A1:H1');
    sheet.getCell('A1').value = 'BÁO CÁO QUẢN LÝ DƯ NỢ';
    sheet.getCell('A1').alignment = { horizontal: 'center', vertical: 'middle' };
    sheet.getCell('A1').font = { bold: true, size: 14 };

    sheet.mergeCells('A2:H2');
    sheet.getCell('A2').value = 'Tổng hợp';
    sheet.getCell('A2').alignment = { horizontal: 'center', vertical: 'middle' };

    sheet.mergeCells('A3:H3');
    sheet.getCell('A3').value = 'Thời điểm báo cáo: đến ngày 01/01/2025';
    sheet.getCell('A3').alignment = { horizontal: 'center', vertical: 'middle' };

    // 2. Header cho bảng đầu tiên
    const header1Row1 = ['Nội dung', 'Cá nhân', '', '', 'Tổ chức', '', '', ''];
    const header1Row2 = ['', 'Có TSBĐ', 'Không có TSBĐ', '', 'Có TSBĐ', 'Không có TSBĐ', '', ''];
    const header1Row3 = ['', 'Tiêu chuẩn', 'Quá hạn', 'Tiêu chuẩn', 'Quá hạn', 'Tiêu chuẩn', 'Quá hạn', ''];

    sheet.addRow(header1Row1);
    sheet.addRow(header1Row2);
    sheet.addRow(header1Row3);

    // Merge cells cho bảng đầu tiên
    sheet.mergeCells('B4:C4');
    sheet.mergeCells('D4:E4');
    sheet.mergeCells('F4:G4');
    sheet.mergeCells('A4:A6');

    // Thêm dữ liệu bảng đầu tiên
    const data1 = [
      ['Giá trị dự nợ', '', '', '', '', '', '', ''],
      ['Tỷ lệ tổng giá trị dự nợ', '', '', '', '', '', '', ''],
      ['Số lượng khoản vay', '', '', '', '', '', '', ''],
      ['Tỷ lệ tổng số lượng khoản vay', '', '', '', '', '', '', ''],
    ];
    data1.forEach((row) => sheet.addRow(row));

    // 3. Header cho bảng thứ hai
    sheet.addRow([]);
    const header2Row1 = ['Giá trị dự nợ', 'Theo KH', '', '', 'Theo khoản vay', '', '', ''];
    const header2Row2 = ['', 'Cá nhân', 'Tổ chức', '', 'Có TSBĐ', 'Không có TSBĐ', 'Tất cả', ''];

    sheet.addRow(header2Row1);
    sheet.addRow(header2Row2);

    // Merge cells cho bảng thứ hai
    sheet.mergeCells('B12:C12');
    sheet.mergeCells('E12:G12');

    // Thêm dữ liệu bảng thứ hai
    const data2 = [
      ['Max', '', '', '', '', '', '', ''],
      ['Min', '', '', '', '', '', '', ''],
      ['Bình quân', '', '', '', '', '', '', ''],
    ];
    data2.forEach((row) => sheet.addRow(row));

    // 4. Định dạng chung cho bảng
    const headers = [4, 5, 12, 13];
    headers.forEach((rowNumber) => {
      sheet.getRow(rowNumber).eachCell((cell) => {
        cell.font = { bold: true, color: { argb: 'FFFFFF' } };
        cell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: '4F81BD' },
        };
        cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
      });
    });

    // Áp dụng border và định dạng cho toàn bộ bảng
    sheet.eachRow({ includeEmpty: true }, (row, rowNumber) => {
      if (rowNumber >= 6 && rowNumber <= 10) {
        row.eachCell((cell) => {
          cell.border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' },
          };
          cell.alignment = { wrapText: true };
        });
      }

      if (rowNumber >= 14 && rowNumber <= 16) {
        row.eachCell((cell) => {
          cell.border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' },
          };
          cell.alignment = { wrapText: true };
        });
      }
    });

    // 5. Thiết lập kích thước cột
    sheet.columns = [
      { width: 20 }, // Nội dung
      { width: 15 }, // Cá nhân - Có TSBĐ
      { width: 15 }, // Cá nhân - Không có TSBĐ
      { width: 15 }, // Tổ chức - Có TSBĐ
      { width: 15 }, // Tổ chức - Không có TSBĐ
      { width: 15 },
      { width: 15 },
      { width: 15 },
    ];

    // 6. Xuất file Excel
    res.setHeader(
      'Content-Type',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    );
    res.setHeader(
      'Content-Disposition',
      'attachment; filename=bao_cao_quan_ly_du_no.xlsx',
    );

    await workbook.xlsx.write(res);
    res.end();
  }
}
