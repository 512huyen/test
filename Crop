import React, { useState, useCallback } from 'react';
import Cropper from 'react-easy-crop';
import { getCroppedImg } from './cropUtils'; // Hàm cắt ảnh, chúng ta sẽ tạo nó sau

const ImageCropper = () => {
  const [image, setImage] = useState(null); // Lưu trữ ảnh
  const [crop, setCrop] = useState({ x: 0, y: 0 }); // Vị trí crop
  const [zoom, setZoom] = useState(1); // Zoom
  const [rotation, setRotation] = useState(0); // Góc xoay
  const [croppedImage, setCroppedImage] = useState(null); // Ảnh đã cắt

  const onImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {
    // Hàm này sẽ được gọi sau khi cắt ảnh
    getCroppedImg(image, croppedAreaPixels, rotation).then((croppedImageUrl) => {
      setCroppedImage(croppedImageUrl);
    });
  }, [image, rotation]);

  const onRotateLeft = () => setRotation(rotation - 90);
  const onRotateRight = () => setRotation(rotation + 90);

  return (
    <div>
      <input type="file" onChange={onImageUpload} />
      {image && (
        <div style={{ position: 'relative', width: '500px', height: '500px' }}>
          <Cropper
            image={image}
            crop={crop}
            zoom={zoom}
            rotation={rotation}
            aspect={1}
            onCropChange={setCrop}
            onZoomChange={setZoom}
            onCropComplete={onCropComplete}
          />
        </div>
      )}
      <div>
        <button onClick={onRotateLeft}>Xoay trái</button>
        <button onClick={onRotateRight}>Xoay phải</button>
      </div>
      {croppedImage && (
        <div>
          <h3>Ảnh đã cắt:</h3>
          <img src={croppedImage} alt="Cropped" />
        </div>
      )}
    </div>
  );
};

export default ImageCropper;
export const getCroppedImg = (imageSrc, pixelCrop, rotation = 0) => {
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');

  const image = new Image();
  image.src = imageSrc;

  return new Promise((resolve, reject) => {
    image.onload = () => {
      const imageWidth = image.width;
      const imageHeight = image.height;

      // Set canvas size
      canvas.width = pixelCrop.width;
      canvas.height = pixelCrop.height;

      // Apply rotation if any
      ctx.translate(canvas.width / 2, canvas.height / 2);
      ctx.rotate((rotation * Math.PI) / 180);
      ctx.translate(-canvas.width / 2, -canvas.height / 2);

      // Draw the image on the canvas
      ctx.drawImage(
        image,
        pixelCrop.x,
        pixelCrop.y,
        pixelCrop.width,
        pixelCrop.height,
        0,
        0,
        pixelCrop.width,
        pixelCrop.height
      );

      // Return the image as a Data URL
      resolve(canvas.toDataURL());
    };
    image.onerror = (error) => reject(error);
  });
};
