Để tính số lượng tài khoản cá nhân theo quý hiện tại, bạn cần xác định quý hiện tại dựa trên thời gian hiện tại. Mình sẽ cập nhật logic để lấy dữ liệu của quý hiện tại và xuất thông tin vào báo cáo.

Cập nhật Hàm exportCustomerReport tính toán theo quý hiện tại

Cập nhật Hàm

import * as ExcelJS from 'exceljs';
import { Response } from 'express';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Between } from 'typeorm';
import { Customer } from './entities/customer.entity';

@Injectable()
export class CustomerService {
    constructor(
        @InjectRepository(Customer)
        private readonly customerRepository: Repository<Customer>,
    ) {}

    async exportCustomerReport(response: Response): Promise<void> {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Báo cáo quản lý tài khoản');

        // ======== Header ========
        worksheet.mergeCells('A1:J1');
        worksheet.getCell('A1').value = 'BÁO CÁO QUẢN LÝ TÀI KHOẢN';
        worksheet.getCell('A1').alignment = { horizontal: 'center' };
        worksheet.getCell('A1').font = { size: 16, bold: true };

        // ======== Thời gian báo cáo ========
        worksheet.mergeCells('A2:J2');
        worksheet.getCell('A2').value = `Thời điểm báo cáo: đến ngày ${new Date().toLocaleDateString()}`;
        worksheet.getCell('A2').alignment = { horizontal: 'right' };
        worksheet.getCell('A2').font = { italic: true };

        // ======== Phần Tổng hợp ========
        worksheet.mergeCells('A4:B4');
        worksheet.getCell('A4').value = 'Tổng hợp';
        worksheet.getCell('A4').font = { bold: true };

        // Header tổng hợp
        const summaryHeaderRow = worksheet.addRow([
            'Loại tài khoản', 'Trong ngày', 'Trong tháng', 'Quý hiện tại', 'Trong năm', 'Tổng cộng'
        ]);
        summaryHeaderRow.font = { bold: true };
        summaryHeaderRow.eachCell((cell) => {
            cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
            cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
        });

        // Lấy thời gian hiện tại
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);

        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59);

        const startOfYear = new Date(today.getFullYear(), 0, 1);
        const endOfYear = new Date(today.getFullYear(), 11, 31, 23, 59, 59);

        // Xác định quý hiện tại
        const currentMonth = today.getMonth() + 1; // Tháng từ 0-11, nên +1 để thành 1-12
        let startOfCurrentQuarter, endOfCurrentQuarter;

        if (currentMonth >= 1 && currentMonth <= 3) {
            // Quý I
            startOfCurrentQuarter = new Date(today.getFullYear(), 0, 1);
            endOfCurrentQuarter = new Date(today.getFullYear(), 2, 31, 23, 59, 59);
        } else if (currentMonth >= 4 && currentMonth <= 6) {
            // Quý II
            startOfCurrentQuarter = new Date(today.getFullYear(), 3, 1);
            endOfCurrentQuarter = new Date(today.getFullYear(), 5, 30, 23, 59, 59);
        } else if (currentMonth >= 7 && currentMonth <= 9) {
            // Quý III
            startOfCurrentQuarter = new Date(today.getFullYear(), 6, 1);
            endOfCurrentQuarter = new Date(today.getFullYear(), 8, 30, 23, 59, 59);
        } else {
            // Quý IV
            startOfCurrentQuarter = new Date(today.getFullYear(), 9, 1);
            endOfCurrentQuarter = new Date(today.getFullYear(), 11, 31, 23, 59, 59);
        }

        // Tính số lượng tài khoản cá nhân
        const personalAccountsTodayCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfDay, endOfDay),
            },
        });

        const personalAccountsMonthCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfMonth, endOfMonth),
            },
        });

        const personalAccountsCurrentQuarterCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfCurrentQuarter, endOfCurrentQuarter),
            },
        });

        const personalAccountsYearCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfYear, endOfYear),
            },
        });

        const totalPersonalAccountsCount = await this.customerRepository.count({
            where: { customer_type: 'personal' },
        });

        // Dữ liệu tổng hợp
        const summaryRows = [
            [
                'Khách hàng cá nhân',
                personalAccountsTodayCount,
                personalAccountsMonthCount,
                personalAccountsCurrentQuarterCount,
                personalAccountsYearCount,
                totalPersonalAccountsCount,
            ],
        ];

        summaryRows.forEach((data) => {
            const row = worksheet.addRow(data);
            row.eachCell((cell) => {
                cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
                cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
            });
        });

        // Tự động xuống dòng cho dữ liệu dài
        worksheet.columns.forEach((column) => {
            column.width = 20;
            column.alignment = { wrapText: true };
        });

        // Xuất file Excel
        response.setHeader(
            'Content-Type',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        );
        response.setHeader(
            'Content-Disposition',
            'attachment; filename=BaoCao_QuanLy_TaiKhoan.xlsx',
        );

        await workbook.xlsx.write(response);
        response.end();
    }
}

Giải thích:

	1.	Quý hiện tại:
	•	Tính toán quý hiện tại dựa trên tháng hiện tại:
	•	Quý I: Tháng 1 - Tháng 3
	•	Quý II: Tháng 4 - Tháng 6
	•	Quý III: Tháng 7 - Tháng 9
	•	Quý IV: Tháng 10 - Tháng 12
	2.	Dữ liệu báo cáo:
	•	Báo cáo tổng hợp sẽ bao gồm các thông tin:
	•	Trong ngày: Tài khoản cá nhân mở trong ngày hiện tại
	•	Trong tháng: Tài khoản cá nhân mở trong tháng hiện tại
	•	Quý hiện tại: Tài khoản cá nhân mở trong quý hiện tại
	•	Trong năm: Tài khoản cá nhân mở trong năm hiện tại
	•	Tổng cộng: Tổng số tài khoản cá nhân trong toàn bộ thời gian

Với phần cập nhật này, bạn sẽ có báo cáo chính xác về số lượng tài khoản cá nhân theo quý hiện tại.
