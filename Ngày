import * as ExcelJS from 'exceljs';
import { Response } from 'express';
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository, Between } from 'typeorm';
import { Customer } from './entities/customer.entity';

@Injectable()
export class CustomerService {
    constructor(
        @InjectRepository(Customer)
        private readonly customerRepository: Repository<Customer>,
    ) {}

    async exportCustomerReport(response: Response): Promise<void> {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Báo cáo quản lý tài khoản');

        // ======== Header ========
        worksheet.mergeCells('A1:J1');
        worksheet.getCell('A1').value = 'BÁO CÁO QUẢN LÝ TÀI KHOẢN';
        worksheet.getCell('A1').alignment = { horizontal: 'center' };
        worksheet.getCell('A1').font = { size: 16, bold: true };

        // ======== Thời gian báo cáo ========
        worksheet.mergeCells('A2:J2');
        worksheet.getCell('A2').value = `Thời điểm báo cáo: đến ngày ${new Date().toLocaleDateString()}`;
        worksheet.getCell('A2').alignment = { horizontal: 'right' };
        worksheet.getCell('A2').font = { italic: true };

        // ======== Phần Tổng hợp ========
        worksheet.mergeCells('A4:B4');
        worksheet.getCell('A4').value = 'Tổng hợp';
        worksheet.getCell('A4').font = { bold: true };

        // Header tổng hợp
        const summaryHeaderRow = worksheet.addRow([
            'Loại tài khoản', 'Trong ngày', 'Trong tháng', 'Trong năm', 'Tổng cộng'
        ]);
        summaryHeaderRow.font = { bold: true };
        summaryHeaderRow.eachCell((cell) => {
            cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
            cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
        });

        // Lấy thời gian hiện tại
        const today = new Date();
        const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());
        const endOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 23, 59, 59);

        const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
        const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59);

        const startOfYear = new Date(today.getFullYear(), 0, 1);
        const endOfYear = new Date(today.getFullYear(), 11, 31, 23, 59, 59);

        // Tính số lượng tài khoản cá nhân
        const personalAccountsTodayCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfDay, endOfDay),
            },
        });

        const personalAccountsMonthCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfMonth, endOfMonth),
            },
        });

        const personalAccountsYearCount = await this.customerRepository.count({
            where: {
                customer_type: 'personal',
                created_at: Between(startOfYear, endOfYear),
            },
        });

        const totalPersonalAccountsCount = await this.customerRepository.count({
            where: { customer_type: 'personal' },
        });

        // Dữ liệu tổng hợp
        const summaryRows = [
            [
                'Khách hàng cá nhân',
                personalAccountsTodayCount,
                personalAccountsMonthCount,
                personalAccountsYearCount,
                totalPersonalAccountsCount,
            ]
        ];

        summaryRows.forEach((data) => {
            const row = worksheet.addRow(data);
            row.eachCell((cell) => {
                cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
                cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
            });
        });

        // ======== Phần Chi tiết ========
        worksheet.mergeCells('A8:J8');
        worksheet.getCell('A8').value = 'Chi tiết';
        worksheet.getCell('A8').font = { bold: true };

        worksheet.mergeCells('A9:J9');
        worksheet.getCell('A9').value = `Thời điểm báo cáo: đến ngày ${new Date().toLocaleDateString()}`;
        worksheet.getCell('A9').alignment = { horizontal: 'right' };
        worksheet.getCell('A9').font = { italic: true };

        // Header chi tiết
        const detailHeaderRow = worksheet.addRow([
            'Số tài khoản', 'Tên khách hàng', 'Ngày sinh', 'Giới tính', 'Khu vực', 'Quốc tịch',
            'Loại khách hàng', 'Thời gian mở', 'Trạng thái tài khoản'
        ]);
        detailHeaderRow.font = { bold: true };
        detailHeaderRow.eachCell((cell) => {
            cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
            cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
        });

        // Lấy dữ liệu từ bảng customer
        const customers = await this.customerRepository.find();

        // Thêm dữ liệu chi tiết
        customers.forEach((customer) => {
            const gender = customer.gender === 'male' ? 'Nam' : 'Nữ';
            const customerType = customer.customer_type === 'personal' ? 'Khách hàng cá nhân' : 'Khách hàng tổ chức';
            const status = customer.status === 'active' ? 'Active' : 'Inactive';

            const row = worksheet.addRow([
                customer.number_phone,                     // Số tài khoản
                customer.customer_name,                    // Tên khách hàng
                customer.date_of_birth?.toLocaleDateString(), // Ngày sinh
                gender,                                    // Giới tính
                customer.address,                          // Khu vực
                customer.national,                         // Quốc tịch
                customerType,                              // Loại khách hàng
                customer.created_at?.toLocaleDateString(), // Thời gian mở
                status                                     // Trạng thái tài khoản
            ]);

            row.eachCell((cell) => {
                cell.alignment = { horizontal: 'center', vertical: 'middle', wrapText: true };
                cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
            });
        });

        // Tự động xuống dòng cho dữ liệu dài
        worksheet.columns.forEach((column) => {
            column.width = 20;
            column.alignment = { wrapText: true };
        });

        // Xuất file Excel
        response.setHeader(
            'Content-Type',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        );
        response.setHeader(
            'Content-Disposition',
            'attachment; filename=BaoCao_QuanLy_TaiKhoan.xlsx',
        );

        await workbook.xlsx.write(response);
        response.end();
    }
}
